name: Build CI

on:
  push:
    branches:
      - master

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-22.04
    name: Build and test code
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]

    steps:
      - uses: actions/checkout@v3

      - name : Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: https://registry.npmjs.org/

      - name: Install dependencies
        run: npm ci

      - name: Build mod
        run: npm run build-mod

      - name: Tests
        run: npm run test-translation && npm run test-unit && npm run test-integration

  publish-npm:
    needs: build
    name: Publish API Client to NPM
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name : Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          registry-url: https://registry.npmjs.org/

      - name: Check version changes
        id: check
        uses: EndBug/version-check@v2
        with:
          diff-search: true
          file-name: package.json
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Version update detected
        if: steps.check.outputs.changed == 'true'
        run: 'echo "Version change found! New version: ${{ steps.check.outputs.version }} (${{ steps.check.outputs.type }})"'

      - name: Install dependencies
        if: steps.check.outputs.changed == 'true'
        run: npm ci

      - name: Build mod
        if: steps.check.outputs.changed == 'true'
        run: npm run build-mod

      - name: Build Web Lib
        if: steps.check.outputs.changed == 'true'
        run: npm run build

      - name: Publish to NPM
        if: steps.check.outputs.changed == 'true'
        run: cd ./dist && npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Get version
        if: steps.check.outputs.changed == 'true'
        run: echo "client_version=$(node -pe "require('./package.json').version")" >> $GITHUB_ENV

      - name: Tag and push
        if: steps.check.outputs.changed == 'true'
        run: |
          git tag v${{ env.client_version }}
          git push origin v${{ env.client_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
